<!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>My Memos | Memofy</title>
	<link rel="stylesheet" href="/css/secretary-memos.css">
	<link rel="stylesheet" href="/css/sec-topbar.css">
	<link rel="stylesheet" href="/css/sec-nav.css">
	<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
	<script src="https://unpkg.com/lucide@latest"></script>
</head>

<body>
	<div class="dashboard-container">
		<%- include('../components/sec-nav'); %>

		<main class="main-content">
			<%- include('../components/sec-topbar'); %>

			<div class="dashboard-content">
				<div style="display:flex; justify-content:space-between; align-items:center; margin:0 0 16px;">
					<h1 style="font-size: 24px; color:#1f2937; margin:0;">My Memos</h1>
                    <button id="openDistributeBtn" class="btn-primary compose-btn" style="padding:10px 14px; border:none; border-radius:8px; background:#1C89E3; color:#fff;" onclick="openDistributeModal()">
						<i data-lucide="plus"></i> Distribute Memo
					</button>
				</div>

                <section class="recent-memos-section">
                    <h2>Received Memos</h2>
                    <div style="display:flex; gap:8px; align-items:center; margin:8px 0 12px;">
                        <input id="rxFilterTitle" type="text" placeholder="Filter by title..." style="flex:1; padding:8px 10px; border:1px solid #e5e7eb; border-radius:8px;">
                        <input id="rxFilterDate" type="date" style="padding:8px 10px; border:1px solid #e5e7eb; border-radius:8px;">
                        <button id="rxFilterClear" class="btn-secondary" type="button" style="padding:8px 10px; border:1px solid #e5e7eb; border-radius:8px; background:#fff;">Clear</button>
                    </div>
                    <div id="receivedList" class="memo-list" style="display:flex; flex-direction:column; gap:12px; max-height:360px; overflow:auto; padding-right:8px;">
						<% if (Array.isArray(received) && received.length > 0) { %>
                            <% received.forEach(function(memo, idx){ %>
                                <div class="memo-item received-item" data-index="<%= idx %>">
									<i data-lucide="mail" class="memo-icon blue"></i>
									<div class="memo-info">
										<h4><%= memo.subject %></h4>
										<p>From: <%= memo.sender ? ((memo.sender.firstName||'') + ' ' + (memo.sender.lastName||'')) : '' %></p>
                                            <% if (Array.isArray(memo.attachments) && memo.attachments.length > 0) { %>
                                                <div style="margin-top:8px; display:flex; flex-direction:column; gap:8px;">
                                                    <% memo.attachments.forEach(function(att){
                                                        const fileName = att && att.path
                                                            ? (att.path.includes('/') ? att.path.split('/').pop() : (att.path.includes('\\\\') ? att.path.split('\\\\').pop() : (att.filename || '')))
                                                            : (att.filename || '');
                                                        const isImg = (att && att.mimetype && att.mimetype.startsWith('image/')) || /\.(png|jpe?g|gif|webp)$/i.test(fileName);
                                                    %>
                                                        <% if (isImg) { %>
                                                            <img src="/uploads/<%= fileName %>" alt="<%= att.filename %>" style="max-width:100%; max-height:220px; height:auto; border:1px solid #e5e7eb; border-radius:8px; display:block;" />
                                                        <% } %>
                                                    <% }); %>
                                                </div>
                                            <% } %>
									</div>
									<span class="memo-date"><%= new Date(memo.createdAt).toLocaleDateString() %></span>
								</div>
							<% }) %>
						<% } else { %>
							<div class="memo-item">
								<i data-lucide="inbox" class="memo-icon"></i>
								<div class="memo-info">
									<h4>No received memos</h4>
									<p>Incoming memos will appear here</p>
								</div>
							</div>
						<% } %>
                    </div>
				</section>

				<section class="recent-memos-section" style="margin-top:24px;">
					<h2>My Sent/Pending Memos</h2>
					<div class="memo-list">
						<% if (Array.isArray(memos) && memos.length > 0) { %>
							<% memos.forEach(function(memo){ %>
								<div class="memo-item">
									<i data-lucide="file-text" class="memo-icon blue"></i>
									<div class="memo-info">
										<h4><%= memo.subject %></h4>
										<p>To: <%= memo.recipient && (memo.recipient.firstName || memo.recipient.email) ? (memo.recipient.firstName + ' ' + (memo.recipient.lastName || '')) : '' %></p>
										<p style="color:#64748b; font-size:12px;">Status: <%= memo.status %></p>
									</div>
									<span class="memo-date"><%= new Date(memo.createdAt).toLocaleDateString() %></span>
								</div>
							<% }) %>
						<% } else { %>
							<div class="memo-item">
								<i data-lucide="inbox" class="memo-icon"></i>
								<div class="memo-info">
									<h4>No memos yet</h4>
									<p>Your memos will appear here after creation.</p>
								</div>
							</div>
						<% } %>
					</div>
				</section>
			</div>
		</main>
	</div>

    <!-- View Received Memo Modal -->
    <div id="viewMemoModal" class="modal" style="display:none;">
        <div class="modal-content" style="max-width:720px; border-radius:12px;">
            <div class="modal-header" style="display:flex; justify-content:space-between; align-items:center;">
                <h2 id="vmSubject" style="margin:0;">Memo</h2>
                <button class="close" onclick="closeViewMemo()">&times;</button>
            </div>
            <div class="modal-body" style="display:flex; flex-direction:column; gap:10px;">
                <div style="display:flex; align-items:center; gap:10px;">
                    <img id="vmSenderAvatar" src="/images/memofy-logo.png" alt="Sender" style="width:40px; height:40px; border-radius:50%; object-fit:cover; border:1px solid #e5e7eb;" />
                    <div>
                        <div id="vmSenderName" style="font-weight:600; color:#1f2937;">Sender</div>
                        <div id="vmSenderEmail" style="color:#6b7280; font-size:12px;">email@example.com</div>
                    </div>
                </div>
                <div id="vmTimestamp" style="color:#6b7280; font-size:12px;"></div>
                <div id="vmContent" style="white-space:pre-wrap; color:#1f2937;"></div>
                <div id="vmAttachments"></div>
            </div>
            <div class="modal-footer" style="display:flex; justify-content:flex-end; gap:8px; margin-top:8px;">
                <button class="btn-secondary" type="button" onclick="closeViewMemo()" style="padding:10px 14px; border:1px solid #e5e7eb; border-radius:8px; background:#fff;">Close</button>
            </div>
        </div>
    </div>

	<!-- Distribute modal copied from secretary dashboard for consistency -->
	<div id="distributeModal" class="modal" style="display:none;">
		<div class="modal-content" style="max-width:720px; border-radius:12px;">
			<div class="modal-header" style="display:flex; justify-content:space-between; align-items:center;">
				<h2 style="margin:0;">Distribute Memo</h2>
                <button id="closeDistributeBtn" class="close">&times;</button>
			</div>
			<div class="modal-body" style="display:flex; flex-direction:column; gap:12px;">
				<div>
					<label style="display:block; font-weight:600; margin-bottom:6px;">Subject</label>
					<input id="dmSubject" type="text" style="width:100%; padding:10px; border:1px solid #e5e7eb; border-radius:8px;" />
				</div>
				<div>
					<label style="display:block; font-weight:600; margin-bottom:6px;">Message</label>
					<textarea id="dmMessage" rows="5" style="width:100%; padding:10px; border:1px solid #e5e7eb; border-radius:8px;"></textarea>
				</div>
				<div>
					<div style="display:flex; justify-content:space-between; align-items:center; margin-bottom:6px;">
						<label style="font-weight:600;">To:</label>
						<button id="sendDeptBtn" type="button" class="btn-primary" style="padding:8px 12px; border:none; border-radius:8px; background:#1C89E3; color:#fff; cursor:pointer;">Send to <%= user.department || 'Department' %></button>
					</div>
					<input id="userSearch" type="text" placeholder="Search users in your department..." style="width:100%; padding:10px; border:1px solid #e5e7eb; border-radius:8px;" />
					<div style="margin-top:8px;">
						<label><input type="checkbox" id="selectAllChk" /> Select All</label>
					</div>
					<div id="userList" style="max-height:220px; overflow:auto; border:1px solid #e5e7eb; border-radius:8px; padding:8px; display:grid; grid-template-columns:1fr 1fr; gap:6px; margin-top:8px;"></div>
				</div>
			</div>
			<div class="modal-footer" style="display:flex; justify-content:flex-end; gap:8px; margin-top:8px;">
                <button id="cancelDistributeBtn" class="btn-secondary" type="button" style="padding:10px 14px; border:1px solid #e5e7eb; border-radius:8px; background:#fff;">Cancel</button>
                <button id="sendDistributeBtn" class="btn-primary" type="button" style="padding:10px 14px; border:none; border-radius:8px; background:#1C89E3; color:#fff;">Send Memo</button>
			</div>
		</div>
	</div>

	<script>
		lucide.createIcons();
		let deptUsers = [];
		function openDistributeModal(){ document.getElementById('distributeModal').style.display='block'; loadDepartmentUsers(); }
		function closeDistributeModal(){ document.getElementById('distributeModal').style.display='none'; }
		// Fallback explicit binder in case inline onclick is blocked by CSP
		const openBtn = document.getElementById('openDistributeBtn');
		if (openBtn) { openBtn.addEventListener('click', (e)=>{ e.preventDefault(); openDistributeModal(); }); }
		async function loadDepartmentUsers(){
			try{ const res = await fetch('/api/log/department-users'); const data = await res.json(); deptUsers = (data.users||[]); renderUserList(deptUsers); }catch(e){ console.error(e); }
		}
		function renderUserList(list){ const ul = document.getElementById('userList'); ul.innerHTML=''; list.forEach(u=>{ const div=document.createElement('label'); div.style.display='flex'; div.style.alignItems='center'; div.style.gap='8px'; div.innerHTML=`<input type="checkbox" class="userChk" value="${u._id}"> <span>${u.firstName||''} ${u.lastName||''}</span><span style=\"color:#64748b; font-size:12px;\">${u.email}</span>`; ul.appendChild(div); }); }
		document.getElementById('userSearch').addEventListener('input', (e)=>{ const q=e.target.value.toLowerCase(); renderUserList(deptUsers.filter(u=>`${u.firstName||''} ${u.lastName||''} ${u.email}`.toLowerCase().includes(q))); });
		document.getElementById('selectAllChk').addEventListener('change', (e)=>{ document.querySelectorAll('#userList .userChk').forEach(ch=>ch.checked=e.target.checked); });
		document.getElementById('sendDeptBtn').addEventListener('click', ()=>{ document.getElementById('selectAllChk').checked=true; document.querySelectorAll('#userList .userChk').forEach(ch=>ch.checked=true); });
		async function submitDistributeMemo(){ const subject=document.getElementById('dmSubject').value.trim(); const message=document.getElementById('dmMessage').value.trim(); const recipients=Array.from(document.querySelectorAll('#userList .userChk:checked')).map(el=>el.value); if(!subject||!message||recipients.length===0){ alert('Please fill subject, message, and select at least one recipient.'); return; } try{ const res=await fetch('/api/log/memos/distribute',{ method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify({ subject, message, recipients }) }); const data=await res.json(); if(res.ok && data.success){ alert('Memo submitted successfully and is pending admin approval.'); closeDistributeModal(); location.reload(); } else { alert((data && (data.message||data.detail)) || 'Failed to submit memo'); } }catch(e){ alert('Failed to submit memo: '+ (e?.message||'')); } }

        // Received memo modal logic + filters
        window.receivedMemos = <%- JSON.stringify(received || []) %>;
        const receivedListEl = document.getElementById('receivedList');
        function renderReceived(list){
            if (!receivedListEl) return;
            if (!Array.isArray(list) || list.length === 0){
                receivedListEl.innerHTML = `
                    <div class="memo-item">
                        <i data-lucide="inbox" class="memo-icon"></i>
                        <div class="memo-info">
                            <h4>No received memos</h4>
                            <p>Incoming memos will appear here</p>
                        </div>
                    </div>`;
                lucide.createIcons();
                return;
            }
            receivedListEl.innerHTML = list.map((memo, idx) => {
                const senderName = `${memo.sender?.firstName||''} ${memo.sender?.lastName||''}`.trim();
                // attachments html (images only)
                let atts = '';
                if (Array.isArray(memo.attachments)){
                    memo.attachments.forEach(att => {
                        const fileName = att && att.path
                            ? (att.path.includes('/') ? att.path.split('/').pop() : (att.path.includes('\\\\') ? att.path.split('\\\\').pop() : (att.filename || '')))
                            : (att.filename || '');
                        const isImg = (att && att.mimetype && att.mimetype.startsWith('image/')) || /\.(png|jpe?g|gif|webp)$/i.test(fileName);
                        if (isImg){
                            atts += `<img src="/uploads/${fileName}" alt="${att.filename||'image'}" style="max-width:100%; max-height:220px; height:auto; border:1px solid #e5e7eb; border-radius:8px; display:block;">`;
                        }
                    });
                }
                return `
                <div class="memo-item received-item" data-index="${idx}">
                    <i data-lucide="mail" class="memo-icon blue"></i>
                    <div class="memo-info">
                        <h4>${memo.subject||''}</h4>
                        <p>From: ${senderName}</p>
                        ${atts ? `<div style="margin-top:8px; display:flex; flex-direction:column; gap:8px;">${atts}</div>` : ''}
                    </div>
                    <span class="memo-date">${new Date(memo.createdAt).toLocaleDateString()}</span>
                </div>`;
            }).join('');
            lucide.createIcons();
            // Bind open handlers
            receivedListEl.querySelectorAll('.received-item').forEach(el => {
                el.addEventListener('click', () => {
                    const idx = Number(el.getAttribute('data-index'));
                    openViewMemo(idx);
                });
            });
        }
        renderReceived(window.receivedMemos);

        // Filters
        const rxTitle = document.getElementById('rxFilterTitle');
        const rxDate = document.getElementById('rxFilterDate');
        const rxClear = document.getElementById('rxFilterClear');
        function applyReceivedFilters(){
            const t = (rxTitle?.value || '').toLowerCase();
            const d = (rxDate?.value || '');
            const filtered = (window.receivedMemos||[]).filter(m => {
                const okTitle = !t || String(m.subject||'').toLowerCase().includes(t);
                const okDate = !d || (new Date(m.createdAt)).toISOString().slice(0,10) === d;
                return okTitle && okDate;
            });
            renderReceived(filtered);
        }
        if (rxTitle) rxTitle.addEventListener('input', applyReceivedFilters);
        if (rxDate) rxDate.addEventListener('change', applyReceivedFilters);
        if (rxClear) rxClear.addEventListener('click', () => { if (rxTitle) rxTitle.value=''; if (rxDate) rxDate.value=''; applyReceivedFilters(); });

        // Bind modal control buttons (no inline handlers to respect CSP)
        const closeBtn = document.getElementById('closeDistributeBtn');
        const cancelBtn = document.getElementById('cancelDistributeBtn');
        const sendBtn = document.getElementById('sendDistributeBtn');
        if (closeBtn) closeBtn.addEventListener('click', (e)=>{ e.preventDefault(); closeDistributeModal(); });
        if (cancelBtn) cancelBtn.addEventListener('click', (e)=>{ e.preventDefault(); closeDistributeModal(); });
        if (sendBtn) sendBtn.addEventListener('click', async (e)=>{ e.preventDefault(); await submitDistributeMemo(); });
		function openViewMemo(index){
			const memo = (window.receivedMemos||[])[index];
			if(!memo) return;
			document.getElementById('vmSubject').textContent = memo.subject || 'Memo';
			const senderName = ((memo.sender?.firstName||'') + ' ' + (memo.sender?.lastName||'')).trim();
			document.getElementById('vmSenderName').textContent = senderName || 'Sender';
			document.getElementById('vmSenderEmail').textContent = memo.sender?.email || '';
			const avatar = document.getElementById('vmSenderAvatar');
			if (avatar) avatar.src = memo.sender?.profilePicture || '/images/memofy-logo.png';
			const ts = new Date(memo.createdAt);
			document.getElementById('vmTimestamp').textContent = ts.toLocaleString();
			document.getElementById('vmContent').textContent = memo.content || '';

			const attDiv = document.getElementById('vmAttachments');
			attDiv.innerHTML = '';
            if (Array.isArray(memo.attachments) && memo.attachments.length){
				const wrap = document.createElement('div');
				wrap.style.marginTop = '8px';
				memo.attachments.forEach(att => {
					const fileName = att && att.path
						? (att.path.includes('/') ? att.path.split('/').pop() : (att.path.includes('\\\\') ? att.path.split('\\\\').pop() : (att.filename || '')))
						: (att.filename || '');
                    const isImg = (att && att.mimetype && att.mimetype.startsWith('image/')) || /\.(png|jpe?g|gif|webp)$/i.test(fileName);
                    if (isImg){
                        const img = document.createElement('img'); img.src = `/uploads/${fileName}`; img.alt = att.filename || 'image'; img.style.maxWidth='100%'; img.style.height='auto'; img.style.border='1px solid #e5e7eb'; img.style.borderRadius='8px'; img.style.display='block'; img.style.marginBottom='8px';
                        wrap.appendChild(img);
                    }
				});
				attDiv.appendChild(wrap);
			}
			document.getElementById('viewMemoModal').style.display='block';
		}
		function closeViewMemo(){ document.getElementById('viewMemoModal').style.display='none'; }
	</script>
</body>

</html>


